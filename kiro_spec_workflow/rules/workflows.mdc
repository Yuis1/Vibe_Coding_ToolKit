---
description: 通用开发工作流程和部署流程
globs: []
alwaysApply: false
---

# 通用开发工作流程

## 项目初始化流程
1. **项目创建**：根据用户需求选择合适的技术栈模板
2. **依赖安装**：自动安装必要的依赖包和开发工具
3. **环境配置**：生成 .env 文件和相关配置文件
4. **项目结构**：创建标准的项目目录结构

## 开发部署流程
1. **本地开发**：启动开发服务器，支持热重载
2. **代码构建**：执行 build 命令生成生产版本
3. **本地预览**：使用 live-server 或其他工具预览构建结果
4. **部署确认**：询问用户选择部署目标

## 部署选项
1. **Vercel 部署**：
   - 生成 vercel.json 配置文件
   - 支持自动部署和环境变量配置
   - 返回部署后的访问链接

2. **静态托管部署**：
   - 支持 Netlify、GitHub Pages 等平台
   - 自动优化静态资源
   - 生成带随机参数的访问链接避免缓存

3. **容器化部署**：
   - 生成 Dockerfile 和 docker-compose.yml
   - 支持本地 Docker 环境运行
   - 提供生产环境部署指导

4. **传统服务器部署**：
   - 生成 PM2 配置文件
   - 提供 Nginx 配置示例
   - 支持系统服务配置

## 资源管理
1. **文件下载**：支持从远程 URL 下载素材文件到本地
2. **资源上传**：将本地文件上传到 CDN 或静态资源服务
3. **模板下载**：从模板库下载项目模板和配置文件
4. **知识库查询**：智能检索开发相关的文档和最佳实践

## 文档生成规则
1. **README.md 生成**：
   - 包含项目名称、描述和特性说明
   - 详细的项目架构和技术选型
   - 安装、开发、构建、部署的完整流程
   - API 接口和环境变量说明

2. **部署文档**：
   - 记录部署配置和访问地址
   - 提供维护和更新指导
   - 包含故障排查和回滚方案

## 配置文件管理
1. **环境配置**：
   - 生成多环境的 .env 文件
   - 支持开发、测试、生产环境分离
   - 安全的密钥和敏感信息管理

2. **构建配置**：
   - 自动生成 vite.config.js、webpack.config.js 等
   - 优化生产环境的构建配置
   - 支持代码分割和资源优化

3. **部署配置**：
   - 根据部署目标生成相应配置文件
   - 支持 CI/CD 流水线配置
   - 提供多种部署方式的配置选项

## MCP 接口调用规则
调用 MCP 服务时需要遵循以下规范：
1. **参数验证**：确保所有参数类型和格式正确
2. **错误处理**：实现完整的错误捕获和处理机制
3. **接口文档**：仔细阅读工具描述和参数要求
4. **数据类型**：严格按照接口定义传递正确的数据类型
5. **必需参数**：确保提供所有必需的参数，如 confirm 等布尔值参数